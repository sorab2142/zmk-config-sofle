/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    macros {
        // used in a hold-tap behaviour below to send a normal key when tapped 
        // but sends this macro on hold
        mo1_f14_macro: mo1_f14_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
                <&macro_press>,
                <&mo LOWER &kp F14>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo LOWER &kp F14>;

            label = "MO1_F14";
        };

        mo2_f15_macro: mo2_f15_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
                <&macro_press>,
                <&mo RAISE &kp F15>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo RAISE &kp F15>;

            label = "MO2_F15";
        };

    };

    behaviors {
        lt1_space_macro: layer1_tap_space_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "LT1_SPACE_MACRO";
            #binding-cells = <2>;
            flavor = "tap-preferred";     // Prioritize tap for quick presses
            tapping-term-ms = <200>;      // 200ms threshold for tap vs. hold
            quick-tap-ms = <125>;         // Prevent hold on fast double-taps
            global-quick-tap;
            bindings = <&mo1_f14_macro>, <&kp>;  // Hold: macro, Tap: keypress
        };

        lt2_space_macro: layer2_tap_space_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "LT2_SPACE_MACRO";
            #binding-cells = <2>;
            flavor = "tap-preferred";     // Prioritize tap for quick presses
            tapping-term-ms = <200>;      // 200ms threshold for tap vs. hold
            quick-tap-ms = <125>;         // Prevent hold on fast double-taps
            global-quick-tap;
            bindings = <&mo2_f15_macro>, <&kp>;  // Hold: macro, Tap: keypress
        };
        
        // BACKSPACE by default but SHIFT+BACKSPACE=DELETE
        // bspc_del: backspace_delete {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp BACKSPACE>, <&kp DELETE>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        //     keep-mods = <(MOD_RSFT)>;
        // };
        
        // CAPSLOCK on a single tap, LSHIFT on a single press and hold, and LCTRL when the tap-dance is pressed twice.
        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
        };

        /*
        - tap: sticky shift
        - double-tap: caps-word (shift + tap mod-morph)
        - hold: shift

        From: https://github.com/urob/zmk-config/
        */
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
            #binding-cells = <0>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |  ESC    |  1  |  2  |  3  |  4  |  5   |                     |   6   |   7   |  8   |   9   |  0  | BKSPC/DEL|
            // |  TAB    |  Q  |  W  |  E  |  R  |  T   |                     |   Y   |   U   |  I   |   O   |  P  | [        |
            // |CAP/SHIFT|  A  |  S  |  D  |  F  |  G   |                     |   H   |   J   |  K   |   L   |  ;  | ' SHIFT  |
            // |  CTRL   |  Z  |  X  |  C  |  V  |  B   |  MUTE |  |PLAY/PAUSE|   N   |   M   |  ,   |   .   |  /  | ] CTRL   |
            //                 | GUI | GUI | ALT |LT1_SP| ENTER |  |    / -   |LT2_RET|   =   | LEFT | RIGHT |

            bindings = <
&kp ESCAPE  &kp N1  &kp N2    &kp N3        &kp N4              &kp N5                                                         &kp N6                   &kp N7     &kp N8     &kp N9     &kp N0    &kp DELETE 
&kp TAB     &kp Q   &kp W     &kp E         &kp R               &kp T                                                          &kp Y                    &kp U      &kp I      &kp O      &kp P     &kp LEFT_BRACKET
&td_mt      &kp A   &kp S     &kp D         &kp F               &kp G                                                          &kp H                    &kp J      &kp K      &kp L      &kp SEMI  &mt RIGHT_SHIFT SINGLE_QUOTE
&kp LCTRL   &kp Z   &kp X     &kp C         &kp V               &kp B                     &kp C_MUTE    &kp K_PLAY_PAUSE       &kp N                    &kp M      &kp COMMA  &kp DOT    &kp FSLH  &mt RCTRL RIGHT_BRACKET
                    &kp LGUI  &kp LEFT_GUI  &mt LEFT_ALT SPACE  &lt1_space_macro 0 SPACE  &kp RET       &mt BACKSLASH MINUS    &lt2_space_macro 0 RET   &mt EQUAL  &kp LEFT   &kp RIGHT
            >;

        sensor-bindings =
                <&inc_dec_kp TAB LS(TAB)>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
            display-name = "lower";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&none      &kp F1     &kp F2     &kp F3    &kp F4    &kp F5                     &kp F6     &kp F7    &kp F8     &kp F9     &kp F10   &kp F11
&kp GRAVE  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                     &kp N6     &kp N7    &kp N8     &kp N9     &kp N0    &kp F12
&none      &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                  &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR   &kp RPAR  &kp PIPE
&none      &kp EQUAL  &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC   &none    &none  &kp LBKT   &kp RBKT  &kp SEMI   &kp COLON  &kp BSLH  &none
                      &none      &none     &none     &none      &none    &none  &none      &none     &none      &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
            display-name = "raise";

            // ------------------------------------------------------------------------------------------------------------
            // |       |      |      |       |       |      |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&none  &none       &none      &none        &none        &none                     &none      &none                   &none     &none              &none    &none
&none  &kp INS     &kp PSCRN  &kp K_CMENU  &none        &none                     &kp PG_UP  &kp HOME                &kp UP    &kp END            &kp N0   &none
&none  &kp LALT    &kp LCTRL  &kp LSHFT    &none        &kp CLCK                  &kp PG_DN  &kp LEFT                &kp DOWN  &kp RIGHT          &kp DEL  &kp BSPC
&none  &kp K_UNDO  &kp K_CUT  &kp K_COPY   &kp K_PASTE  &none     &none    &none  &none      &kp LC(LS(LEFT_ARROW))  &none     &kp RC(RS(RIGHT))  &none    &none
                   &none      &none        &none        &none     &none    &none  &none      &none                   &none     &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        adjust_layer {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            display-name = "adjust";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                               &none  &none  &none  &none  &none  &none
&ext_power EP_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none  &none  &none  &none  &none  &none
&none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none  &none  &none  &none  &none  &none
&none              &none            &none            &none            &none            &none            &rgb_ug RGB_TOG    &none  &none  &none  &none  &none  &none  &none
                                    &none            &none            &none            &none            &none              &none  &none  &none  &none  &none
            >;
        };

        extra1 { status = "reserved"; };

        extra2 { status = "reserved"; };
    };
};
